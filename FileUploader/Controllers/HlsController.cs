using Microsoft.AspNetCore.Mvc;

using System.Text;

[Route("api/[controller]")]
[ApiController]
public class HlsController : ControllerBase
{
    private readonly string _videoPath = Path.Combine(Directory.GetCurrentDirectory(), "..\\Uploads");
    private readonly int _chunkSize = 10 * 1024 * 1024; // 10 MB

    [HttpGet("master")]
    public IActionResult GetMasterPlaylist()
    {
        var playlistPath = Path.Combine(_videoPath, "Fluid-Player", "playlist", "song", "master.m3u8");

        if (!System.IO.File.Exists(playlistPath))
        {
            return NotFound();
        }

        // Read the original .m3u8 file
        var playlistContent = System.IO.File.ReadAllText(playlistPath);

        // Modify the URLs for the segments to point to the API
        // Assuming the segments are named as segment0.ts, segment1.ts, etc.
        var apiBaseUrl = $"{Request.Scheme}://{Request.Host}/api/hls/playlist/";

        // Replace the segment paths with the API endpoint URLs
        var modifiedContent = playlistContent.Replace("360p", apiBaseUrl + "360p").Replace("720p", apiBaseUrl + "720p").Replace("1080p", apiBaseUrl + "1080p");

        // Return the modified content as a FileStream
        var stream = new MemoryStream(Encoding.UTF8.GetBytes(modifiedContent));
        return new FileStreamResult(stream, "application/vnd.apple.mpegurl");
    }

    [HttpGet("playlist/{quality}")]
    public IActionResult GetPlaylist(string quality)
    {
        // Path to the .m3u8 file generated by FFmpeg
        var playlistPath = Path.Combine(_videoPath, "Fluid-Player", "playlist", "song", $"{quality}");

        if (!System.IO.File.Exists(playlistPath))
        {
            return NotFound();
        }

        // Read the original .m3u8 file
        var playlistContent = System.IO.File.ReadAllText(playlistPath);

        // Modify the URLs for the segments to point to the API
        // Assuming the segments are named as segment0.ts, segment1.ts, etc.
        var apiBaseUrl = $"{Request.Scheme}://{Request.Host}/api/hls/segment/";

        // Replace the segment paths with the API endpoint URLs
        var modifiedContent = playlistContent.Replace(quality.Replace(".m3u8", ""), apiBaseUrl + quality.Replace(".m3u8", ""));

        // Return the modified content as a FileStream
        var stream = new MemoryStream(Encoding.UTF8.GetBytes(modifiedContent));
        return new FileStreamResult(stream, "application/vnd.apple.mpegurl");
    }

    [HttpGet("segment/{quality}_{segmentName}")]
    public IActionResult GetSegment(string quality, string segmentName)
    {
        // Path to your .ts segment file
        var segmentPath = Path.Combine(_videoPath, "Fluid-Player", "playlist", "song", $"{quality}_{segmentName}");

        if (!System.IO.File.Exists(segmentPath))
        {
            return NotFound();
        }

        var stream = new FileStream(segmentPath, FileMode.Open, FileAccess.Read);
        return new FileStreamResult(stream, "video/MP2T");
    }
}